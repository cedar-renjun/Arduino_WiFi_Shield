###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.40.1.53790/W32 for ARM     24/Feb/2013  09:52:11 #
# Copyright 1999-2012 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  C:\Users\renjun\Desktop\Cox\CoX_Peripheral\CoX_Periphera #
#                    l_KLx\testframe\testport.c                               #
#    Command line =  C:\Users\renjun\Desktop\Cox\CoX_Peripheral\CoX_Periphera #
#                    l_KLx\testframe\testport.c -D ewarm -lCN                 #
#                    C:\Users\renjun\Desktop\Cox\CoX_Peripheral\CoX_Periphera #
#                    l_KLx\uart\test\suite1\ewarm\Debug\List\ -lB             #
#                    C:\Users\renjun\Desktop\Cox\CoX_Peripheral\CoX_Periphera #
#                    l_KLx\uart\test\suite1\ewarm\Debug\List\ -o              #
#                    C:\Users\renjun\Desktop\Cox\CoX_Peripheral\CoX_Periphera #
#                    l_KLx\uart\test\suite1\ewarm\Debug\Obj\ --no_cse         #
#                    --no_unroll --no_inline --no_code_motion --no_tbaa       #
#                    --no_clustering --no_scheduling --debug --endian=little  #
#                    --cpu=Cortex-M0+ -e --fpu=None --dlib_config             #
#                    "C:\Program Files\IAR Systems\Embedded Workbench         #
#                    6.4\arm\INC\c\DLib_Config_Normal.h" -I                   #
#                    C:\Users\renjun\Desktop\Cox\CoX_Peripheral\CoX_Periphera #
#                    l_KLx\uart\test\suite1\ewarm\..\..\..\..\libcox\ -I      #
#                    C:\Users\renjun\Desktop\Cox\CoX_Peripheral\CoX_Periphera #
#                    l_KLx\uart\test\suite1\ewarm\..\..\..\..\testframe\ -I   #
#                    C:\Users\renjun\Desktop\Cox\CoX_Peripheral\CoX_Periphera #
#                    l_KLx\uart\test\suite1\ewarm\..\..\..\..\uart\test\suite #
#                    1\src\ -On                                               #
#    List file    =  C:\Users\renjun\Desktop\Cox\CoX_Peripheral\CoX_Periphera #
#                    l_KLx\uart\test\suite1\ewarm\Debug\List\testport.lst     #
#    Object file  =  C:\Users\renjun\Desktop\Cox\CoX_Peripheral\CoX_Periphera #
#                    l_KLx\uart\test\suite1\ewarm\Debug\Obj\testport.o        #
#                                                                             #
#                                                                             #
###############################################################################

C:\Users\renjun\Desktop\Cox\CoX_Peripheral\CoX_Peripheral_KLx\testframe\testport.c
      1          #include "test.h"
      2          
      3          #define _PORTC_PCR3             (0x4004B00C)
      4          #define _PORTC_PCR4             (0x4004B010)
      5          
      6          #define UART_DIV                16UL
      7          #define UART_BAUD               115200UL
      8          
      9          
     10          //*****************************************************************************
     11          //
     12          //! \brief Init uart to print.
     13          //!
     14          //! \param None
     15          //!
     16          //! \details uart config as (115200, 8 data bit, 1 stop bit , no partiy)
     17          //!
     18          //! \return None.
     19          //
     20          //*****************************************************************************

   \                                 In section .bss, align 4
     21          unsigned long tmp = 0;
   \                     tmp:
   \   00000000                      DS8 4
     22          

   \                                 In section .text, align 2, keep-with-next
     23          void 
     24          TestIOInit(void)
     25          {
   \                     TestIOInit:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
     26              unsigned long ulBaud     = 0;
   \   00000002   0x2500             MOVS     R5,#+0
     27              unsigned long ulTmpReg   = 0;
   \   00000004   0x2400             MOVS     R4,#+0
     28              unsigned long ulBusClock = 0;
   \   00000006   0x2600             MOVS     R6,#+0
     29          
     30              //
     31              // Configure System clock
     32              //
     33              xSysCtlClockSet(48000000, xSYSCTL_OSC_MAIN | xSYSCTL_XTAL_8MHZ);
   \   00000008   0x2188             MOVS     R1,#+136
   \   0000000A   0x0109             LSLS     R1,R1,#+4        ;; #+2176
   \   0000000C   0x....             LDR      R0,??DataTable1  ;; 0x2dc6c00
   \   0000000E   0x.... 0x....      BL       xSysCtlClockSet
     34          
     35              //
     36              // Get Bus Clock
     37              //
     38              ulBusClock = SysCtlBusClkGet();
   \   00000012   0x.... 0x....      BL       SysCtlBusClkGet
   \   00000016   0x0006             MOVS     R6,R0
     39          
     40              //
     41              // Enable GPIO/UART Clock
     42              //
     43              
     44              xHWREG(SIM_SCGC5) |= SIM_SCGC5_PORTC_EN;    
   \   00000018   0x....             LDR      R0,??DataTable1_1  ;; 0x40048038
   \   0000001A   0x6800             LDR      R0,[R0, #+0]
   \   0000001C   0x2180             MOVS     R1,#+128
   \   0000001E   0x0109             LSLS     R1,R1,#+4        ;; #+2048
   \   00000020   0x4301             ORRS     R1,R1,R0
   \   00000022   0x....             LDR      R0,??DataTable1_1  ;; 0x40048038
   \   00000024   0x6001             STR      R1,[R0, #+0]
     45              xHWREG(SIM_SCGC4) |= SIM_SCGC4_UART1_EN;
   \   00000026   0x....             LDR      R0,??DataTable1_2  ;; 0x40048034
   \   00000028   0x6800             LDR      R0,[R0, #+0]
   \   0000002A   0x2180             MOVS     R1,#+128
   \   0000002C   0x0109             LSLS     R1,R1,#+4        ;; #+2048
   \   0000002E   0x4301             ORRS     R1,R1,R0
   \   00000030   0x....             LDR      R0,??DataTable1_2  ;; 0x40048034
   \   00000032   0x6001             STR      R1,[R0, #+0]
     46              
     47          
     48              
     49          
     50              //
     51              // Remap UART pin to GPIO Port
     52              //
     53              
     54              // UART1_RX --> PC3
     55              ulTmpReg = xHWREG(_PORTC_PCR3);
   \   00000034   0x....             LDR      R0,??DataTable1_3  ;; 0x4004b00c
   \   00000036   0x6800             LDR      R0,[R0, #+0]
   \   00000038   0x0004             MOVS     R4,R0
     56              ulTmpReg &= ~(PORT_PCR_PIN_MUX_M);
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x....             LDR      R4,??DataTable1_4  ;; 0xfffff8ff
   \   0000003E   0x4004             ANDS     R4,R4,R0
     57              ulTmpReg |= PORT_PCR_PIN_ALT3;
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0x24C0             MOVS     R4,#+192
   \   00000044   0x00A4             LSLS     R4,R4,#+2        ;; #+768
   \   00000046   0x4304             ORRS     R4,R4,R0
     58              xHWREG(_PORTC_PCR3) = ulTmpReg;
   \   00000048   0x....             LDR      R0,??DataTable1_3  ;; 0x4004b00c
   \   0000004A   0x6004             STR      R4,[R0, #+0]
     59          
     60              
     61              
     62          
     63              // UART1_TX --> PC4
     64              ulTmpReg = xHWREG(_PORTC_PCR4);
   \   0000004C   0x....             LDR      R0,??DataTable1_5  ;; 0x4004b010
   \   0000004E   0x6800             LDR      R0,[R0, #+0]
   \   00000050   0x0004             MOVS     R4,R0
     65              ulTmpReg &= ~(PORT_PCR_PIN_MUX_M);
   \   00000052   0x0020             MOVS     R0,R4
   \   00000054   0x....             LDR      R4,??DataTable1_4  ;; 0xfffff8ff
   \   00000056   0x4004             ANDS     R4,R4,R0
     66              ulTmpReg |= PORT_PCR_PIN_ALT3;
   \   00000058   0x0020             MOVS     R0,R4
   \   0000005A   0x24C0             MOVS     R4,#+192
   \   0000005C   0x00A4             LSLS     R4,R4,#+2        ;; #+768
   \   0000005E   0x4304             ORRS     R4,R4,R0
     67              xHWREG(_PORTC_PCR4) = ulTmpReg;
   \   00000060   0x....             LDR      R0,??DataTable1_5  ;; 0x4004b010
   \   00000062   0x6004             STR      R4,[R0, #+0]
     68          
     69             
     70              
     71              //
     72              // Disable UART Receive/Transmit
     73              //
     74              xHWREGB(UART1_BASE + UART_012_C2) &= (unsigned char)(~UART_012_C2_TE_MASK);
   \   00000064   0x....             LDR      R0,??DataTable1_6  ;; 0x4006b003
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x21F7             MOVS     R1,#+247
   \   0000006A   0x4001             ANDS     R1,R1,R0
   \   0000006C   0x....             LDR      R0,??DataTable1_6  ;; 0x4006b003
   \   0000006E   0x7001             STRB     R1,[R0, #+0]
     75              xHWREGB(UART1_BASE + UART_012_C2) &= (unsigned char)(~UART_012_C2_RE_MASK);
   \   00000070   0x....             LDR      R0,??DataTable1_6  ;; 0x4006b003
   \   00000072   0x7800             LDRB     R0,[R0, #+0]
   \   00000074   0x21FB             MOVS     R1,#+251
   \   00000076   0x4001             ANDS     R1,R1,R0
   \   00000078   0x....             LDR      R0,??DataTable1_6  ;; 0x4006b003
   \   0000007A   0x7001             STRB     R1,[R0, #+0]
     76          
     77              //
     78              // Configure UART1 to 8-N-1
     79              // Set register to default value
     80              xHWREGB(UART1_BASE + UART_012_C1) = (unsigned char)(0x00);
   \   0000007C   0x....             LDR      R0,??DataTable1_7  ;; 0x4006b002
   \   0000007E   0x2100             MOVS     R1,#+0
   \   00000080   0x7001             STRB     R1,[R0, #+0]
     81          
     82              //
     83              // Configure UART Baud 115200
     84              //
     85              ulBaud = ulBusClock/(UART_DIV*UART_BAUD);
   \   00000082   0x0030             MOVS     R0,R6
   \   00000084   0x21E1             MOVS     R1,#+225
   \   00000086   0x0349             LSLS     R1,R1,#+13       ;; #+1843200
   \   00000088   0x.... 0x....      BL       __aeabi_uidiv
   \   0000008C   0x0005             MOVS     R5,R0
     86          
     87              xHWREGB(UART1_BASE + UART_012_BDH) &= (unsigned char)(~UART_012_BDH_SBR_MASK);
   \   0000008E   0x....             LDR      R0,??DataTable1_8  ;; 0x4006b000
   \   00000090   0x7800             LDRB     R0,[R0, #+0]
   \   00000092   0x21E0             MOVS     R1,#+224
   \   00000094   0x4001             ANDS     R1,R1,R0
   \   00000096   0x....             LDR      R0,??DataTable1_8  ;; 0x4006b000
   \   00000098   0x7001             STRB     R1,[R0, #+0]
     88              xHWREGB(UART1_BASE + UART_012_BDH) |= 
     89                                  (unsigned char)((ulBaud >> 8) & UART_012_BDH_SBR_MASK);
   \   0000009A   0x....             LDR      R0,??DataTable1_8  ;; 0x4006b000
   \   0000009C   0x7800             LDRB     R0,[R0, #+0]
   \   0000009E   0x0029             MOVS     R1,R5
   \   000000A0   0x0A09             LSRS     R1,R1,#+8
   \   000000A2   0x06C9             LSLS     R1,R1,#+27       ;; ZeroExtS R1,R1,#+27,#+27
   \   000000A4   0x0EC9             LSRS     R1,R1,#+27
   \   000000A6   0x4301             ORRS     R1,R1,R0
   \   000000A8   0x....             LDR      R0,??DataTable1_8  ;; 0x4006b000
   \   000000AA   0x7001             STRB     R1,[R0, #+0]
     90          
     91              xHWREGB(UART1_BASE + UART_012_BDL) = (unsigned char)(ulBaud);
   \   000000AC   0x....             LDR      R0,??DataTable1_9  ;; 0x4006b001
   \   000000AE   0x0029             MOVS     R1,R5
   \   000000B0   0x7001             STRB     R1,[R0, #+0]
     92           
     93              tmp = xHWREGB(UART1_BASE + UART_012_BDH);
   \   000000B2   0x....             LDR      R0,??DataTable1_10
   \   000000B4   0x....             LDR      R1,??DataTable1_8  ;; 0x4006b000
   \   000000B6   0x7809             LDRB     R1,[R1, #+0]
   \   000000B8   0xB2C9             UXTB     R1,R1
   \   000000BA   0x6001             STR      R1,[R0, #+0]
     94              tmp = xHWREGB(UART1_BASE + UART_012_BDL);
   \   000000BC   0x....             LDR      R0,??DataTable1_10
   \   000000BE   0x....             LDR      R1,??DataTable1_9  ;; 0x4006b001
   \   000000C0   0x7809             LDRB     R1,[R1, #+0]
   \   000000C2   0xB2C9             UXTB     R1,R1
   \   000000C4   0x6001             STR      R1,[R0, #+0]
     95              
     96              //
     97              // Enable UART Receive/Transmit
     98              //
     99              xHWREGB(UART1_BASE + UART_012_C2) |= (unsigned char)(UART_012_C2_TE_MASK);
   \   000000C6   0x....             LDR      R0,??DataTable1_6  ;; 0x4006b003
   \   000000C8   0x7800             LDRB     R0,[R0, #+0]
   \   000000CA   0x2108             MOVS     R1,#+8
   \   000000CC   0x4301             ORRS     R1,R1,R0
   \   000000CE   0x....             LDR      R0,??DataTable1_6  ;; 0x4006b003
   \   000000D0   0x7001             STRB     R1,[R0, #+0]
    100              xHWREGB(UART1_BASE + UART_012_C2) |= (unsigned char)(UART_012_C2_RE_MASK);
   \   000000D2   0x....             LDR      R0,??DataTable1_6  ;; 0x4006b003
   \   000000D4   0x7800             LDRB     R0,[R0, #+0]
   \   000000D6   0x2104             MOVS     R1,#+4
   \   000000D8   0x4301             ORRS     R1,R1,R0
   \   000000DA   0x....             LDR      R0,??DataTable1_6  ;; 0x4006b003
   \   000000DC   0x7001             STRB     R1,[R0, #+0]
    101          
    102          }
   \   000000DE   0xBD70             POP      {R4-R6,PC}       ;; return
    103          
    104          //*****************************************************************************
    105          //
    106          //! \brief print a char.
    107          //!
    108          //! \param None
    109          //!
    110          //! \return None.
    111          //
    112          //*****************************************************************************

   \                                 In section .text, align 2, keep-with-next
    113          void 
    114          TestIOPut(char ch)
    115          {
   \                     TestIOPut:
   \   00000000   0xB580             PUSH     {R7,LR}
    116              volatile unsigned char ulStatus = 0;
   \   00000002   0x4669             MOV      R1,SP
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0x700A             STRB     R2,[R1, #+0]
    117          
    118              //
    119              // Wait until transmit register availavle
    120              //
    121              do
    122              {
    123                  ulStatus = xHWREGB(UART1_BASE + UART_012_S1) &
    124                             ((unsigned char) UART_012_S1_TDRE_MASK);
   \                     ??TestIOPut_0:
   \   00000008   0x....             LDR      R1,??DataTable1_11  ;; 0x4006b004
   \   0000000A   0x7809             LDRB     R1,[R1, #+0]
   \   0000000C   0x2280             MOVS     R2,#+128
   \   0000000E   0x4011             ANDS     R1,R1,R2
   \   00000010   0x466A             MOV      R2,SP
   \   00000012   0x7011             STRB     R1,[R2, #+0]
    125              }while(0 == ulStatus);
   \   00000014   0x4669             MOV      R1,SP
   \   00000016   0x7809             LDRB     R1,[R1, #+0]
   \   00000018   0x2900             CMP      R1,#+0
   \   0000001A   0xD0F5             BEQ      ??TestIOPut_0
    126          
    127              //
    128              // Send the char
    129              //
    130              xHWREGB(UART1_BASE + UART_012_D) = ch;
   \   0000001C   0x....             LDR      R1,??DataTable1_12  ;; 0x4006b007
   \   0000001E   0x7008             STRB     R0,[R1, #+0]
    131          
    132          }
   \   00000020   0xBD01             POP      {R0,PC}          ;; return
    133          
    134          //*****************************************************************************
    135          //
    136          //! \brief Enable IRQ.
    137          //!
    138          //! \param None
    139          //!
    140          //! \return None.
    141          //
    142          //*****************************************************************************

   \                                 In section .text, align 2, keep-with-next
    143          void TestEnableIRQ(void)
    144          {
   \                     TestEnableIRQ:
   \   00000000   0xB580             PUSH     {R7,LR}
    145              xCPUcpsie();
   \   00000002   0x.... 0x....      BL       xCPUcpsie
    146          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return
    147          
    148          //*****************************************************************************
    149          //
    150          //! \brief Disable IRQ.
    151          //!
    152          //! \param None
    153          //!
    154          //! \return None.
    155          //
    156          //*****************************************************************************

   \                                 In section .text, align 2, keep-with-next
    157          void TestDisableIRQ(void)
    158          {
   \                     TestDisableIRQ:
   \   00000000   0xB580             PUSH     {R7,LR}
    159              xCPUcpsid();
   \   00000002   0x.... 0x....      BL       xCPUcpsid
    160          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1:
   \   00000000   0x02DC6C00         DC32     0x2dc6c00

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_1:
   \   00000000   0x40048038         DC32     0x40048038

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_2:
   \   00000000   0x40048034         DC32     0x40048034

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_3:
   \   00000000   0x4004B00C         DC32     0x4004b00c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_4:
   \   00000000   0xFFFFF8FF         DC32     0xfffff8ff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_5:
   \   00000000   0x4004B010         DC32     0x4004b010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_6:
   \   00000000   0x4006B003         DC32     0x4006b003

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_7:
   \   00000000   0x4006B002         DC32     0x4006b002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_8:
   \   00000000   0x4006B000         DC32     0x4006b000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_9:
   \   00000000   0x4006B001         DC32     0x4006b001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_10:
   \   00000000   0x........         DC32     tmp

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_11:
   \   00000000   0x4006B004         DC32     0x4006b004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable1_12:
   \   00000000   0x4006B007         DC32     0x4006b007
    161          
    162          //*****************************************************************************
    163          //
    164          // The error routine that is called if the driver library encounters an error.(COX)
    165          //
    166          //*****************************************************************************
    167          #ifdef xDEBUG
    168          void
    169          __xerror__(char *pcFilename, unsigned long ulLine)
    170          {
    171              while(1);
    172          }
    173          #endif
    174          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
        8  TestDisableIRQ
              8 -> xCPUcpsid
        8  TestEnableIRQ
              8 -> xCPUcpsie
       16  TestIOInit
             16 -> SysCtlBusClkGet
             16 -> __aeabi_uidiv
             16 -> xSysCtlClockSet
        8  TestIOPut


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
       4  ??DataTable1_10
       4  ??DataTable1_11
       4  ??DataTable1_12
       4  ??DataTable1_2
       4  ??DataTable1_3
       4  ??DataTable1_4
       4  ??DataTable1_5
       4  ??DataTable1_6
       4  ??DataTable1_7
       4  ??DataTable1_8
       4  ??DataTable1_9
       8  TestDisableIRQ
       8  TestEnableIRQ
     224  TestIOInit
      34  TestIOPut
       4  tmp

 
   4 bytes in section .bss
 326 bytes in section .text
 
 326 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
