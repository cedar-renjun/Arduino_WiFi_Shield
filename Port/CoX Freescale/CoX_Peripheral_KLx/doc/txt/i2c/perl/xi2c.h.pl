###############################################################################
# xI2C_INT_Type
###############################################################################
use Text::Table;
my $tb = Text::Table->new(
    # First separator column 
    { is_sep => 1, title => "//! +", body => "//! |", },
    
    # Column 1
    { title => "------------------------", align => left, },
    
    # Separator column
    { is_sep => 1, title => "+", body => "|", },
    
    # Column 2
    { title => "----------------", align => center, },
    
    # Separator column
    { is_sep => 1, title => "+", body => "|", },
    
    # Column 3
    { title => "------------------------", align => center, },
    
    # End separator column
    { is_sep => 1, title => "+", body => "|", },
); 

    
# Fill Table Cotent
$tb->load(
    # Line 0(Column Name)
    [ "xI2C Interrupts", "COX", "NUC1xx"  ],
    [ "------------------------", "----------------","------------------------", ],
    [ "xI2C_INT_FUNCTION", "Mandatory", "Y" ],
    [ "------------------------", "----------------","------------------------", ],
    [ "xI2C_INT_ERROR", "Non-Mandatory", "N" ],
    [ "------------------------", "----------------","------------------------", ],
);  

# Print to console or file
print "\n#####xI2C_INT_Type\n";
print $tb; 
###############################################################################
#
###############################################################################



###############################################################################
# xI2C_STATUS_Type
###############################################################################
use Text::Table;
my $tb = Text::Table->new(
    # First separator column 
    { is_sep => 1, title => "//! +", body => "//! |", },
    
    # Column 1
    { title => "----------------------------------------", align => left, },
    
    # Separator column
    { is_sep => 1, title => "+", body => "|", },
    
    # Column 2
    { title => "----------------", align => center, },
    
    # Separator column
    { is_sep => 1, title => "+", body => "|", },
    
    # Column 3
    { title => "----------", align => center, },
    
    # End separator column
    { is_sep => 1, title => "+", body => "|", },
); 

    
# Fill Table Cotent
$tb->load(
    # Line 0(Column Name)
    [ "xI2C Status Type", "COX", "NUC1xx"  ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_BUS_ERROR", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_NO_INF", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_M_TX_START", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_M_TX_RESTART", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_M_TX_SLAW_ACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_M_TX_SLAW_NACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_M_TX_DAT_ACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_M_TX_DAT_NACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_M_TX_ARB_LOST", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_M_RX_SLAR_ACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_M_RX_SLAR_NACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_M_RX_DAT_ACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_M_RX_DAT_NACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_RX_SLAW_ACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_RX_ARB_LOST_M_SLA", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_RX_GENCALL_ACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_RX_ARB_LOST_M_GENCALL", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_RX_PRE_SLA_DAT_ACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_RX_PRE_SLA_DAT_NACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_RX_PRE_GENCALL_DAT_ACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_RX_PRE_GENCALL_DAT_NACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_RX_STA_STO_SLVREC_SLVTRX", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_TX_SLAR_ACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_TX_ARB_LOST_M_SLA", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_TX_DAT_ACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_TX_DAT_NACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
    [ "xI2C_I2STAT_S_TX_LAST_DAT_ACK", "Mandatory", "Y" ],
    [ "----------------------------------------", "----------------","----------", ],
);  

# Print to console or file
print "\n#####xI2C_STATUS_Type\n";
print $tb; 
###############################################################################
#
###############################################################################


###############################################################################
# xI2C_Transfer_Type
###############################################################################
use Text::Table;
my $tb = Text::Table->new(
    # First separator column 
    { is_sep => 1, title => "//! +", body => "//! |", },
    
    # Column 1
    { title => "------------------------", align => left, },
    
    # Separator column
    { is_sep => 1, title => "+", body => "|", },
    
    # Column 2
    { title => "----------------", align => center, },
    
    # Separator column
    { is_sep => 1, title => "+", body => "|", },
    
    # Column 3
    { title => "------------------------", align => center, },
    
    # End separator column
    { is_sep => 1, title => "+", body => "|", },
); 

    
# Fill Table Cotent
$tb->load(
    # Line 0(Column Name)
    [ "xI2C Transfer Type", "COX", "NUC1xx"  ],
    [ "------------------------", "----------------","------------------------", ],
    [ "xI2C_TRANSFER_POLLING", "Mandatory", "Y" ],
    [ "------------------------", "----------------","------------------------", ],
    [ "xI2C_TRANSFER_INTERRUPT", "Mandatory", "Y" ],
    [ "------------------------", "----------------","------------------------", ],
);  

# Print to console or file
print "\n#####xI2C_Transfer_Type\n";
print $tb; 
###############################################################################
#
###############################################################################


###############################################################################
# xI2C_General_Call
###############################################################################
use Text::Table;
my $tb = Text::Table->new(
    # First separator column 
    { is_sep => 1, title => "//! +", body => "//! |", },
    
    # Column 1
    { title => "------------------------", align => left, },
    
    # Separator column
    { is_sep => 1, title => "+", body => "|", },
    
    # Column 2
    { title => "----------------", align => center, },
    
    # Separator column
    { is_sep => 1, title => "+", body => "|", },
    
    # Column 3
    { title => "------------------------", align => center, },
    
    # End separator column
    { is_sep => 1, title => "+", body => "|", },
); 

    
# Fill Table Cotent
$tb->load(
    # Line 0(Column Name)
    [ "xI2C General Call", "COX", "NUC1xx"  ],
    [ "------------------------", "----------------","------------------------", ],
    [ "xI2C_GENERAL_CALL_DIS", "Mandatory", "Y" ],
    [ "------------------------", "----------------","------------------------", ],
    [ "xI2C_GENERAL_CALL_EN", "Non-Mandatory", "Y" ],
    [ "------------------------", "----------------","------------------------", ],
);  

# Print to console or file
print "\n#####xI2C_General_Call\n";
print $tb; 
###############################################################################
#
###############################################################################



###############################################################################
# xI2C_Exported_APIs
###############################################################################
use Text::Table;
my $tb = Text::Table->new(
    # First separator column 
    { is_sep => 1, title => "//! +", body => "//! |", },
    
    # Column 1
    { title => "--------------------------", align => left, },
    
    # Separator column
    { is_sep => 1, title => "+", body => "|", },
    
    # Column 2
    { title => "----------------", align => center, },
    
    # Separator column
    { is_sep => 1, title => "+", body => "|", },
    
    # Column 3
    { title => "------------------------", align => center, },
    
    # End separator column
    { is_sep => 1, title => "+", body => "|", },
); 

    
# Fill Table Cotent
$tb->load(
    # Line 0(Column Name)
    [ "xI2C API", "COX", "NUC1xx"  ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CIntCallbackInit", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CMasterInit", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CMasterTransfer", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CMasterTransferComplete", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CSlaveTransferComplete", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CMasterStatusGet", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CMasterIntEnable", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CMasterIntDisable", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CMasterIntFlagGet", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CMasterIntFlagClear", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CMasterHandler", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CSlaveInit", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CSlaveTransfer", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CSlaveOwnAddressSet", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CSlaveOwnAddressMaskSet", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CSlaveStatusGet", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CSlaveIntEnable", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CSlaveIntDisable", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CSlaveIntFlagGet", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CSlaveIntFlagClear", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ],
    [ "xI2CSlaveHandler", "Mandatory", "Y" ],
    [ "--------------------------", "----------------","------------------------", ]
);  

# Print to console or file
print "\n#####xI2C_Exported_APIs\n";
print $tb; 
###############################################################################
#
###############################################################################